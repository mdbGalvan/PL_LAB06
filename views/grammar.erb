<script type="text/javascript" src="path-to-mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({tex2jax: {inlineMath: [['$','$'], ['\\(','\\)']]}});
</script>
<script type="text/javascript"
  src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML">
</script>

<br>
<div class="grammar">

  Recuerde que un PEG $G$ es una cuaterna $G =(\Sigma,V,P,S)$.

  <ol>
    <li>$\Sigma$ es el conjunto de terminales. 
    <li>$V$ es un conjunto (disjunto de $\Sigma$) que se denomina conjunto de 
        <i>símbolos no terminales</i>,
        <i>variables sintácticas</i> o <i>categorías gramáticales</i>.
    <li>$P$ es un conjunto de pares de $V \times (V \cup \Sigma )^*$. En vez de escribir
    un par usando la notación $(A, \alpha) \in P$ se escribe $A \leftarrow \alpha$.<br>
    Un elemento de $P$ se denomina <i>regla de análisis</i>. 
    <li>Por último, $S$ es un símbolo del conjunto
    $V$ que se denomina <i>expresión de arranque</i>.
  </ol>

  Concretando en la práctica, la gramática $G$ tendría como:

  <ol>
    <li> <i>Conjunto de Terminales:</i>
          <br>
          $\Sigma = \{ =, +, -, *, /, (, ), 0 \ldots 9 \}$, 
    <li> Conjunto de <i>símbolos no terminales</i>, <i>variables sintácticas</i> o <i>categorías gramáticales</i>:
          <br>
          $V = \{ program, block, statements, statement, assignment, argument, condition, expression, term, factor \} \cup$ <br />
          $\{ASSIGN, ADDMINUS, MULDIV, LPAREN, RPAREN, DOT, COMMA, SEMICOLON, COMPARISON, \_ \} \cup$ <br />
          $\{ID, NUMBER, IF, THEN, ELSE, WHILE, DO, BEGIN, END, CALL, CONST, VAR, PROCEDURE, ODD  \}$
    <li> <i>Reglas de Análisis:</i>
    <ol>
      <pre>
      program      = block DOT

      block        = CONST assignment (COMMA assignment)* SEMICOLON
                  | VAR ID (COMMA ID)* SEMICOLON
                  | (PROCEDURE ID argument? SEMICOLON block SEMICOLON)* statement

      statements   = statement SEMICOLON statements 
                  | statement 

      statement   = ID ASSIGN exp
                  | CALL ID argument?
                  | BEGIN statement ( SEMICOLON statement )* END
                  | IF condition THEN statement ELSE statement
                  | IF condition THEN statement
                  | WHILE condition DO statement

      assignment  = ID ASSIGN NUMBER
      argument    = LPAREN ID (COMMA ID)* RPAREN

      condition   = ODD expression
                  | expression COMPARISON expression

      expression  = term (ADDMINUS term)*

      term        = factor (MULDIV factor)*

      factor      = ID
                  | NUMBER
                  | LPAREN expression RPAREN


      _ = $[ \t\n\r]*

      ASSIGN      = _ '=' _
      ADDMINUS    = _ [+-] _
      MULDIV      = _ [*/] _
      LPAREN      = _ "(" _
      RPAREN      = _ ")" _
      DOT         = _ "." _
      COMMA       = _ "," _
      SEMICOLON   = _ ";" _
      COMPARISON  = _ [<>=!]=|[<>] _
      ID          = _ [a-zA-Z_][a-zA-Z_0-9]* _
      NUMBER      = _ [0-9]+ _

      IF          = _ "if" _
      THEN        = _ "then" _
      ELSE        = _ "else" _
      WHILE       = _ "while" _
      DO          = _ "do" _
      BEGIN       = _ "begin" _
      END         = _ "end" _
      CALL        = _ "call" _
      CONST       = _ "const" _
      VAR         = _ "var" _
      PROCEDURE   = _ "procedure" _
      ODD         = _ "odd" _
      </pre>
    </ol>
    <li> <i>Expresión de arranque: </i> <br> $S = program$
  </ol>

  <i>Nota: </i> Los terminales se expresan en frases. Cada no terminal se define por una norma de la gramática, a excepción de ID y NUMBER, que se supone que se define de manera implícita.
</div>
<br>
<br>
<br>

